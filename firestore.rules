/**
 * @fileOverview Firestore Security Rules for InsuroMatch AI Chatbot
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, chat messages, and recommendations.
 * All user-specific data is nested under the `/users/{userId}` path to ensure that only the authenticated user can access their own data.
 * Insurance plans are stored in a top-level collection with flexible write permissions (currently allowing anyone to read).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles (UserInfo).
 * - /users/{userId}/chat_messages/{messageId}: Stores chat messages for each user (ChatMessage).
 * - /users/{userId}/recommendations/{recommendationId}: Stores insurance plan recommendations (Recommendation).
 * - /insurance_plans/{insurancePlanId}: Stores insurance plan information (InsurancePlan).
 *
 * Key Security Decisions:
 * - User data is strictly segregated under the `/users/{userId}` path, enforcing a strong ownership model.
 * - No user listing is allowed at the top-level `/users` collection for privacy.
 * - Insurance plans are publicly readable, but write access is restricted (currently set to false, can be adjusted for admins).
 *
 * Denormalization for Authorization:
 * - The data structure uses path-based ownership (nesting data under /users/{userId}) to avoid the need for `get()` calls to determine ownership.  The `userId` is implicitly tied to the document.
 *
 * Structural Segregation:
 * - User-specific data is stored in private subcollections under `/users/{userId}`, while insurance plans are stored in a public top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles under /users/{userId}. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can create/update/delete their own profile document ('/users/5shiwxLKxIdJYhvKR9mjymbbZxp1').
     * @deny (create, update, delete): Authenticated user 'anotherUserId' cannot create/update/delete another user's profile document ('/users/5shiwxLKxIdJYhvKR9mjymbbZxp1').
     * @allow (get): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can get their own profile document ('/users/5shiwxLKxIdJYhvKR9mjymbbZxp1').
     * @deny (get): Authenticated user 'anotherUserId' cannot get another user's profile document ('/users/5shiwxLKxIdJYhvKR9mjymbbZxp1').
     * @deny (list): Listing users at the top-level is not allowed for privacy.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only signed-in users can access
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure chat messages under /users/{userId}/chat_messages/{messageId}. Only the authenticated user can access their own chat messages.
     * @path /users/{userId}/chat_messages/{messageId}
     * @allow (create, update, delete): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can create/update/delete their own chat messages under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @deny (create, update, delete): Authenticated user 'anotherUserId' cannot create/update/delete chat messages under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @allow (get): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can get their own chat messages under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @deny (get): Authenticated user 'anotherUserId' cannot get chat messages under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @allow (list): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can list their own chat messages under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/chat_messages/{messageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure insurance plan recommendations under /users/{userId}/recommendations/{recommendationId}. Only the authenticated user can access their own recommendations.
     * @path /users/{userId}/recommendations/{recommendationId}
     * @allow (create, update, delete): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can create/update/delete their own recommendations under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @deny (create, update, delete): Authenticated user 'anotherUserId' cannot create/update/delete recommendations under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @allow (get): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can get their own recommendations under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @deny (get): Authenticated user 'anotherUserId' cannot get recommendations under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @allow (list): Authenticated user '5shiwxLKxIdJYhvKR9mjymbbZxp1' can list their own recommendations under '/users/5shiwxLKxIdJYhvKR9mjymbbZxp1'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/recommendations/{recommendationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Insurance plans are publicly readable, but writes are currently disabled.
     * @path /insurance_plans/{insurancePlanId}
     * @allow (get, list): Any user can read insurance plan information.
     * @deny (create, update, delete): No one can create, update, or delete insurance plans (currently).
     * @principle Allows public read access with restricted write access.
     */
    match /insurance_plans/{insurancePlanId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only validation.
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the document, and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}