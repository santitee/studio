/**
 * @description This ruleset enforces a strict user-ownership model for user profiles, chat messages, and recommendations. Insurance plan information is publicly readable.
 * @dataStructure
 *   /users/{userId} - User profiles, accessible only by the user themselves.
 *   /users/{userId}/chat_messages/{messageId} - Chat messages for each user, accessible only by the user.
 *   /users/{userId}/recommendations/{recommendationId} - Insurance plan recommendations for each user, accessible only by the user.
 *   /insurance_plans/{insurancePlanId} - Publicly accessible insurance plan information.
 * @keySecurityDecisions
 *   - User data is strictly private; listing all users is disallowed.
 *   - Chat messages and recommendations are stored as user subcollections to enforce ownership and simplify security rules.
 *   - Insurance plans are publicly readable, but writes are disallowed for non-authenticated users.
 *   - Schema validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile if the userId matches their auth.uid.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages for a specific user.
     * @path /users/{userId}/chat_messages/{messageId}
     * @allow (create) - Authenticated user can create a chat message under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can access, list, modify, and delete their own chat messages.
     * @deny (create) - Unauthenticated user or a user attempts to create a chat message under another user's ID.
     * @deny (get, list, update, delete) - User attempts to access, list, modify, or delete chat messages for another user.
     * @principle Enforces document ownership and path consistency.
     */
    match /users/{userId}/chat_messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to insurance plan recommendations for a specific user.
     * @path /users/{userId}/recommendations/{recommendationId}
     * @allow (create) - Authenticated user can create a recommendation under their own user ID (likely an admin function).
     * @allow (get, list, update, delete) - Authenticated user can access, list, modify, and delete their own recommendations.
     * @deny (create) - Unauthenticated user or a user attempts to create a recommendation under another user's ID.
     * @deny (get, list, update, delete) - User attempts to access, list, modify, or delete recommendations for another user.
     * @principle Enforces document ownership and path consistency.
     */
    match /users/{userId}/recommendations/{recommendationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to insurance plan documents.
     * @path /insurance_plans/{insurancePlanId}
     * @allow (get, list) - Any user can read insurance plan information.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete plans.
     * @principle Allows public read access but restricts write access to authenticated users.  Further role based access control might be required.
     */
    match /insurance_plans/{insurancePlanId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role-based access control if required.
      allow update: if isSignedIn() && resource != null; // TODO: Add role-based access control if required.
      allow delete: if isSignedIn() && resource != null; // TODO: Add role-based access control if required.
    }
  }
}